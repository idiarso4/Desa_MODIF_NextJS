# Production Docker Compose for OpenSID Next.js
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: opensid-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-opensid_prod}
      POSTGRES_USER: ${POSTGRES_USER:-opensid}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - opensid-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-opensid} -d ${POSTGRES_DB:-opensid_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: opensid-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - opensid-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenSID Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: opensid-app-prod
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-opensid}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-opensid_prod}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # NextAuth
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # Application
      NODE_ENV: production
      PORT: 3000
      
      # Security
      CSRF_SECRET: ${CSRF_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # File Upload
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      UPLOAD_ALLOWED_TYPES: ${UPLOAD_ALLOWED_TYPES:-image/jpeg,image/png,application/pdf}
      
      # Email (if configured)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      
      # Monitoring
      ENABLE_MONITORING: ${ENABLE_MONITORING:-true}
      
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - opensid-network
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: opensid-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - opensid-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: opensid-backup-prod
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-opensid_prod}
      POSTGRES_USER: ${POSTGRES_USER:-opensid}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - opensid-network
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '${BACKUP_SCHEDULE:-0 2 * * *} /backup.sh' | crontab - &&
        crond -f
      "

  # Log Aggregation (Optional)
  # Uncomment if you want centralized logging
  # loki:
  #   image: grafana/loki:2.9.0
  #   container_name: opensid-loki-prod
  #   restart: unless-stopped
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - ./loki/loki-config.yml:/etc/loki/local-config.yaml
  #     - loki_data:/loki
  #   networks:
  #     - opensid-network

  # Monitoring (Optional)
  # Uncomment if you want monitoring dashboard
  # grafana:
  #   image: grafana/grafana:10.0.0
  #   container_name: opensid-grafana-prod
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning:/etc/grafana/provisioning
  #   networks:
  #     - opensid-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  # loki_data:
  #   driver: local
  # grafana_data:
  #   driver: local

networks:
  opensid-network:
    driver: bridge
